pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
function _init()
	cls()
	rot = 0
	rotable = {
		rot=0,
		mapx=0,
		mapy=0,
		mapw=1,
		maph=1,
		x,y = 64,64,
		new = function(self, o)
			o= o or {}
			setmetatable(o,self)
			self.__index = self
			return o
		end,
		w = function(self) 
			return self.mapw*8
		end,
		h = function(self) 
			return self.maph*8
		end,
		rad = function(self) 
			return sqrt((self:w()/2)^2+(self:h()/2)^2)
		end,
		to_polar = function(x, y, rad, rot, offset_x, offset_y)
			local ang = atan2(x, y)+(rot or 0)
			return rad*cos(ang)+offset_x+0.5, rad*sin(ang)+offset_y+0.5
		end,
		tl = function(self)
			
			return self.to_polar(-self:w()/2, -self:h()/2, self:rad(), self.rot, self.x, self.y )
		end,
		tr = function(self)
			return self.to_polar(self:w()/2, -self:h()/2, self:rad(), self.rot, self.x, self.y )
		end,
		bl = function(self)
			return self.to_polar(-self:w()/2, self:h()/2, self:rad(), self.rot, self.x, self.y )
		end,
		br = function(self)
			return self.to_polar(self:w()/2, self:h()/2, self:rad(), self.rot, self.x, self.y )
		end,
		draw = function(self)
			local tlx, tly = self:tl()
			local trx, try = self:tr()
			local blx, bly = self:bl()
			local brx, bry = self:br()
			local h = self:h()
			local dx = (blx-tlx)/h
			local dy = (bly-tly)/h

			minx = tlx
			if (trx < tlx) minx = trx
			if (blx < minx) minx = blx
			if (brx < minx) minx = brx

			
			for i=0, h do
				tline(tlx+dx*i, tly+dy*i, trx+dx*i, try+dy*i,self.mapx, self.mapy+i/8, self.mapx) 
			end
		end,
		outline = function(self)
			local tlx, tly = self:tl()
			local trx, try = self:tr()
			local blx, bly = self:bl()
			local brx, bry = self:br()
			line(tlx, tly, trx, try, 14)
			line( trx, try, brx, bry, 14)
			line( brx, bry, blx, bly, 14)
			line( blx, bly, tlx, tly, 14)
		end,
		fill = function(self) 
			local tlx, tly = self:tl()
			local trx, try = self:tr()
			local blx, bly = self:bl()
			local brx, bry = self:br()

			if (self.rot < 0.25) then
				local topy = tly
				local bottomy = tly
				local width = brx-tlx
				local part1_top_dy = (try - tly)/(trx-tlx)
				local part2_top_dy = (bry -try)/(brx -trx)
				local part1_bottom_dy =(bly-tly)/(blx-tlx)
				local part2_bottom_dy =(bry-bly)/(brx-blx)
				for i= 0, width do
					line(tlx+i, topy, tlx+i, bottomy, i)
					if (tlx + i <= trx) then topy += part1_top_dy else topy += part2_top_dy end
					if (tlx + i <= blx) then bottomy += part1_bottom_dy else bottomy += part2_bottom_dy end
				end



			elseif(self.rot < 0.5) then
			
			elseif self.rot < 0.75 then
			
			else
			end
		end
	}

	car = rotable:new()
	car.mapw = 3
	car.maph = 2
	car.x= 64
	car.y= 64

	car2 = rotable:new()
	car2.mapx = 6
	car2.mapw = 3
	car2.maph = 2
	car2.x= 32
	car2.y= 32
	car2.rot = 270/360

	car3 = rotable:new()
	car3.mapx = 3
	car3.mapw = 3
	car3.maph = 2
	car3.x= 96
	car3.y= 32
	car3.rot = 0.125

	car4 = rotable:new()
	car4.mapw = 3
	car4.maph = 2
	car4.x= 64
	car4.y= 32

end


function _update()

	if btn(1) then 
		rot = rot - 1/128
	elseif btn(0) then
		rot = rot + 1/128
	end
	rot= rot %1
	--rot = 0
	car.rot = rot
	car2.rot = rot
	car3.rot = rot
	car4.rot = rot
end


function _draw()
	cls()
	spr(1, 0,0, 3, 2)

	line (32+ cos(rot)*16, 32 +sin(rot)*16, 32-cos(rot)*16, 32-sin(rot)*16)

	tlx, tly = car:tl()
	trx, try = car:tr()
	blx, bly = car:bl()
	brx, bry = car:br()

	rectfill(
		car.x-(car:w()/2),
		car.y-(car:h()/2),
		car.x+(car:w()/2),
		car.y+(car:h()/2),2)
	circ(car.x,car.y,car:rad(),5)
	

	local h = car:h()
	local dx = (blx-tlx)/h
	local dy = (bly-tly)/h
	for i=0, h do
		tline(tlx+dx*i, tly+dy*i, trx+dx*i, try+dy*i, car.mapx/8, (car.mapy + i)/h ) 
	end
	car:draw()
	car2:draw()
	car3:draw()
	car4:draw()
	car2:draw()
	car2:fill()
	car2:outline()
	car3:draw()
	car4:draw()
	line(tlx,tly,blx,bly, 15)
	line(trx,try,brx,bry, 15)
	line(tlx,tly,trx,try, 15)
	line(blx,bly,brx,bry, 15)
	print("TL", tlx, tly, 7)
	print("BL", blx, bly)
	print("BR", brx, bry)
	print("TR", trx, try)

	print(car:w(), 0,96)
	print(car:h(), 32, 96)
	print(trx-tlx, 0, 102)
	print(bry-try, 32, 102)
	print("radius", 0, 108)
	print(car:rad(), 32, 108)
	print("rot"..rot, 0, 116)
end
__gfx__
00000000555555555555555555555555555555555555555555555555000000000000000000000000000000000000000000000000000000000000000000000000
00000000555555555555555555555555555555555555555555555555000000000000000000000000000000000000000000000000000000000000000000000000
0070070055555aaaaa999999aaa5555555555bbbbb333333bbb55555000000000000000000000000000000000000000000000000000000000000000000000000
0007700055aa9911daaaaaaaaadaa55555bb3311dbbbbbbbbbdbb555000000000000000000000000000000000000000000000000000000000000000000000000
00077000597aaa1d66a4444ad1aaa855537bbb1d66b1111bd1bbb855000000000000000000000000000000000000000000000000000000000000000000000000
00700700597999dccca4aa4acd19a855537333dcccb1bb1bcd13b855000000000000000000000000000000000000000000000000000000000000000000000000
00000000599aaa1d67a4aa4a6d1a9955533bbb1d67b1bb1b6d1b3355000000000000000000000000000000000000000000000000000000000000000000000000
0000000059aaaa11d6a4aa4a7d1aa45553bbbb11d6b1bb1b7d1bb455000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff599aaa11dca4aa4acd1a9955533bbb11dcb1bb1bcd1b3355000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff5979991116a4aa4ad119a8555373331116b1bb1bd113b855000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff597aaa1ddda4444a11aaa855537bbb1dddb1111b11bbb855000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff55aa9911daaaaaaaaadaa55555bb3311dbbbbbbbbbdbb555000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff55555aaaaa999999aaa5555555555bbbbb333333bbb55555000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff555555555555555555555555555555555555555555555555000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff555555555555555555555555555555555555555555555555000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff555555555555555555555555555555555555555555555555000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff555555555555555555555555555555555555555555555555000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff555555555555555555555555555555555555555555555555000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff55555888882222228885555555555ccccc333333ccc55555000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff55882211d888888888d8855555cc3311dcccccccccdcc555000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff5278881d66844448d1888855547ccc1d61c1111c11ccc855000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff527222dccc848848cd128855547333dcc1c1cc1c1d15c855000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff5228881d678488486d182255543ccc1d61c1cc1c1d1c5555000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff52888811d68488487d18845554cccc11d1c1cc1c1d1cc455000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff52288811dc848848cd182255543ccc11d1c1cc1c1d1c5555000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff5272221116848848d11288555473331111c1cc1c1115c855000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff5278881ddd84444811888855547ccc1dd1c1111c11ccc855000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff55882211d888888888d8855555cc3311dcccccccccdcc555000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff55555888882222228885555555555ccccc333333ccc55555000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff555555555555555555555555555555555555555555555555000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff555555555555555555555555555555555555555555555555000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff555555555555555555555555555555555555555555555555000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0102030405062122230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1112131415163132330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
